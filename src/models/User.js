import Mongoose from 'mongoose';
import MongooseUniqueValidator from 'mongoose-unique-validator';

const UserSchema = new Mongoose.Schema(
  {
    token: { type: String, required: false },
    validationCode: { type: String, required: false },
    uid: String,
    avatar: { type: Mongoose.Schema.Types.ObjectId, ref: 'File' },
    addressList: [
      { type: Mongoose.Schema.Types.ObjectId, ref: 'Address', required: true },
    ],
    changePassword: { type: Boolean, required: true, default: true },
    cnpj: { 
      type: String,
    },
    consultant: {
      type: Mongoose.Schema.Types.ObjectId,
      ref: 'User',
    },
    cpf: { 
      type: String,
     },
    birthdate: { type: String, required: false },
    documentType: { type: String, required: false },
    rgNumber: { type: String, required: false },
    issuing: { type: String, required: false },
    dateOfIssue: { type: String, required: false },
    documentUf: { type: String, required: false },
    mothersName: { type: String, required: false },
    fatherName: { type: String, required: false },
    nfInfoToExport: String,
    responsibleCPF: { type: String, required: false },
    responsibleName: { type: String, required: false },
    responsiblePhone: { type: String, required: false },
    responsibleBDay: { type: String, required: false },
    driverNote: { type: Number, default: 0 },
    dateStartCompany: { type: String, required: false },
    documents: [{ type: Mongoose.Schema.Types.ObjectId, ref: 'Documents' }],
    driverCompanyList: [{ type: Mongoose.Schema.Types.ObjectId, ref: 'User' }],
    truckCompanyList: [{ type: Mongoose.Schema.Types.ObjectId, ref: 'Truck' }],
    driverCompanyId: { type: Mongoose.Schema.Types.ObjectId, ref: 'User' },
    email: { type: String, required: false },
    harvestNote: String,
    isActive: { type: Boolean, required: true, default: true },
    isAdmin: { type: Boolean, required: true, default: false },
    isDirector: { type: Boolean, required: true, default: false },
    isOrderManager: { type: Boolean, required: true, default: false },
    isFxManager: { type: Boolean, required: true, default: false },
    isGasStation: { type: Boolean, required: true, default: false },
    isApproved: { type: Boolean, required: true, default: false },
    isBuyer: { type: Boolean, required: true, default: false },
    isConsultant: { type: Boolean, required: true, default: false },
    isLegalPerson: { type: Boolean, required: true, default: false },
    isLogistic: { type: Boolean, required: true, default: false },
    isReSeller: { type: Boolean, required: true, default: false },
    isSeller: { type: Boolean, required: true, default: false },
    isFx: { type: Boolean, required: true, default: false },
    isKeyAccount: { type: Boolean, required: true, default: false },
    isDriver: { type: Boolean, required: true, default: false },
    isDriverCompany: { type: Boolean, required: true, default: false },
    isAnalyst: { type: Boolean, required: true, default: false },
    isPromotor: { type: Boolean, required: true, default: false },
    isManager: { type: Boolean, required: true, default: false },
    isCommercial: { type: Boolean, required: true, default: false },
    isLogistics: { type: Boolean, required: true, default: false },
    isLead: { type: Boolean, required: true, default: true },
    isOperationsBoardUser: { type: Boolean, required: true, default: false },
    isGrainWarehouse: { type: Boolean, required: true, default: false },
    isSellerVerified: { type: Boolean, required: true, default: false },
    isPartner: { type: Boolean, required: true, default: false },
    isPartnerVerified: { type: Boolean, required: true, default: false },
    isManagerBarter: { type: Boolean, required: true, default: false },
    isBarterBroker: { type: Boolean, required: true, default: false },
    isLogManager: { type: Boolean, required: true, default: false },
    isFinanceUser: { type: Boolean, required: true, default: false },
    isFinance: { type: Boolean, default: false },
    isSupplier: { type: Boolean, required: true, default: false },
    isRegistrationManager:{ type: Boolean, default: false },
    isTaxPaidOnRevenueUser: { type: Boolean},
    justification: { type: String },
    stateRegistrationsComplete: [{
    type: Mongoose.Schema.Types.ObjectId,
    ref: 'StateRegistrationComplete',
    }],
    hasScale:{ type:Boolean, default:false},
    harvestCapacity: { type: Number, default: 0 },
    receivementCapacity: { type: Number, default: 0 },
    manager: {
      type: Mongoose.Schema.Types.ObjectId,
      ref: 'User',
      default:null
    },
    barterManager: {
      type: Mongoose.Schema.Types.ObjectId,
      ref: 'User',
    },
    logManager: {
      type: Mongoose.Schema.Types.ObjectId,
      ref: 'User',
    },
    shops: {
      type: Mongoose.Schema.Types.ObjectId,
      ref: 'Shop',
    },
    ratingDriverCompany: { type: String, required: false },
    name: { type: String, required: true },
    fantasyName: { type: String },
    password: { type: String},
    controlPassword: { type: String },
    paymentCreditInDays: Number,
    phone: { type: String },
    promotor: {
      type: Mongoose.Schema.Types.ObjectId,
      ref: 'User',
      default:null
    },
    stateRegistrations: [String],
    homeAddress: {
      type: [
        {
          notes: { type: String },
          uf: { type: String },
          city: { type: String },
          neighborhood: { type: String },
          complement: { type: String },
          number: { type: String },
          street: { type: String },
          cep: { type: String },
        },
      ],
      required: true,
    },
    device: {
      type: String,
    },
    newUser: {
      type: Boolean,
    },
    isDeleted: {
      type: Boolean,
      default: false,
    },
    bankingDocs: {
      frente: {
        type: String,
      },
      verso: {
        type: String,
      },
      selfie: {
        type: String,
      },
    },
    gender: String,
    bypass: Boolean,
    signedInitial: Boolean,
    version: { type: String, default: 'v12' },
    banking: {
      login: {
        username: String,
        password: String,
        migrate: String,
        token: String,
        accountId: String,
        accountNumber: String,
        accountTitle: String,
        accountType: String,
        accountDocNumber: String,
        agency: String,
        planId: String,
        personType: String,
        createdAt: String,
        masterUser: String,
        totalAccounts: String,
        opaqueRefreshTokenId: String,
        permission: String,
        phoneValidated: String,
        emailValidated: String,
        title: String,
        hasTransactionPassword: String,
        userEnabled: String,
        enabledRestrictedTransactions: String,
      },
      accounts: [
        {
          title: String,
          accountId: String,
          accountNumber: String,
          documentNumber: String,
          masterUser: Boolean,
        },
      ],
    },
    logo: String,
    notification: {
      type: Mongoose.Schema.Types.ObjectId,
      ref: 'NotifyToken',
    },
    driverPayment: {
      key: String,
      typePayment: String,
      responsible: String,
    },
    locations: [
      {
        _id: false,
        latitude: Number,
        longitude: Number,
        name: String,
      },
    ],
    driverInformations: {
      cnhNumber: String,
      cnhProtocol: String,
      cnhInsurance: String,
      expeditionDate: String,
      expirationDate: String,
      category: String,
      firstCNH: String,
      cnhUf: String,
    },
    truck: {
      type: Mongoose.Schema.Types.ObjectId,
      ref: 'Truck',
    },
    autoUpdate: Boolean,
    antt: String,
    responsibleBuyer: String,
    cpfResponsibleBuyer: String,
    driverEvaluationNotes: [{ _id: false, ticket: String, grade: Number }],
    owner: { type: Mongoose.Schema.Types.ObjectId, ref: 'User' },
    logins: [{ type: Mongoose.Schema.Types.ObjectId, ref: 'Login' }],
    isFunruralPaidOnRevenue: Boolean,
    bankAccount: {
      type: Mongoose.Schema.Types.ObjectId,
      ref: 'FoxBankAccount',
    },
  },
  {
    timestamps: true,
  }
);

UserSchema.plugin(MongooseUniqueValidator);

export default Mongoose.model('User', UserSchema);
